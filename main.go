package main

import (
	"encoding/gob"
	"log"
	"os"
	"tgbotBARAHOLKA/backend"
	"tgbotBARAHOLKA/bot"
	"tgbotBARAHOLKA/config"
	"tgbotBARAHOLKA/db"
	"time"
)

func main() {
	cfg := config.LoadConfig()
	file, err := os.Open("config.gob")
	if err != nil {
		if os.IsNotExist(err) {
			config.CreateDefaultSettings()
		} else {
			log.Panic("–û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
		}
	} else {
		decoder := gob.NewDecoder(file)
		_ = decoder.Decode(&config.GlobalSettings)
	}
	setting := config.GlobalSettings
	setting.Buttons = [17]config.Button{
		{ButtonText: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ", Discription: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ"},
		{ButtonText: "–û–±—É—á–µ–Ω–∏–µ", Discription: "–û–±—É—á–µ–Ω–∏–µ"},
		{ButtonText: "–ü—Ä–æ—Ñ–∏–ª—å", Discription: "–ü—Ä–æ—Ñ–∏–ª—å"},
		{ButtonText: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", Discription: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"},
		{ButtonText: "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", Discription: "–ü–æ–¥–ø–∏—Å–∞–ª—Å—è"},
		{ButtonText: "¬´ –ù–∞–∑–∞–¥", Discription: "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"},
		{ButtonText: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", Discription: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"},
		{ButtonText: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", Discription: "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"},
		{ButtonText: "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", Discription: "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"},
		{ButtonText: "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", Discription: "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"},
		{ButtonText: "–ü—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä", Discription: "–ü—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä"},
		{ButtonText: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", Discription: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"},
		{ButtonText: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", Discription: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"},
		{ButtonText: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", Discription: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"},
		{ButtonText: "üö´ –û—Ç–º–µ–Ω–∞ ", Discription: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"},
		{ButtonText: "üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", Discription: "üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"},
		{ButtonText: "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", Discription: "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"},
	}
	config.Save(setting)
	file.Close()
	db.Connect(cfg)
	go backend.StartBackend()
	go func() {
		for {
			defer func() {
				if r := recover(); r != nil {
					log.Printf("–ü–∞–Ω–∏–∫–∞: %v\n", r)
				}
			}()

			log.Println("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
			bot.StartBot(cfg)
			log.Println("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")

			time.Sleep(5 * time.Second)
		}
	}()

	log.Println("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç...")
	select {}
}
