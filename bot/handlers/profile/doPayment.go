package profile

import (
	"strconv"
	"strings"
	"tgbotBARAHOLKA/bot/context"
	"tgbotBARAHOLKA/db"
	"tgbotBARAHOLKA/db/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type transferType struct {
	ActiveStep uint
	Data       transferData
}

type transferData struct {
	RecipientID int64
	Amount      uint
}

func HandleDoPayment(update *tgbotapi.Update, ctx *context.Context) {
	var userID int64
	var value string
	if update.Message != nil {
		userID = update.Message.Chat.ID
		value = update.Message.Text
		deleteMsg := tgbotapi.DeleteMessageConfig{
			ChatID:    userID,
			MessageID: update.Message.MessageID,
		}
		ctx.BotAPI.Send(deleteMsg)
	} else {
		userID = update.CallbackQuery.From.ID
	}
	state := context.GetUserState(userID, ctx)
	context.UpdateUserLevel(userID, ctx, 6)

	var rows [][]tgbotapi.InlineKeyboardButton
	transfer, exist := state.Data["transfer"].(transferType)
	if !exist {
		transfer.ActiveStep = 0
		state.Data["transfer"] = transfer
	}

	switch transfer.ActiveStep {
	case 0:
		if update.CallbackQuery != nil && strings.Split(update.CallbackQuery.Data, "_")[0] == "Transfer" {
			transfer.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
			))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 1:
		if update.Message != nil {
			recipientID, err := strconv.ParseInt(value, 10, 64)
			if err != nil {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
				))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			var count int64
			db.DB.Model(models.User{}).Where(models.User{TelegramID: int64(recipientID)}).Count(&count)
			if count == 0 {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
				))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			if userID == recipientID {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
				))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			transfer.Data.RecipientID = recipientID
			transfer.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
			))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.\n\nüí∞ <i>–ü—Ä–∏–º–µ—Ä:</i> 500\n\n‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 2:
		if update.Message != nil {
			amount, err := strconv.ParseUint(value, 10, 64)
			if err != nil || amount <= 0 {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
				))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500).",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			transfer.Data.Amount = uint(amount)
			transfer.ActiveStep++
			var RecipientUser models.User
			db.DB.Where(models.User{TelegramID: int64(transfer.Data.RecipientID)}).First(&RecipientUser)
			var user models.User
			db.DB.Where("telegram_id = ?", userID).First(&user)
			if user.Balance < uint(amount) {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
				))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm"),
			))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back"),
			))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"‚ùó –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É: "+value+"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @"+RecipientUser.Username+" ("+RecipientUser.FirstName+" "+RecipientUser.LastName+")",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 3:
		if update.CallbackQuery != nil && update.CallbackQuery.Data == "confirm" {
			var user models.User
			db.DB.Where("telegram_id = ?", userID).First(&user)
			db.DB.Model(&models.User{}).
				Where("telegram_id = ?", userID).
				Updates(map[string]interface{}{
					"balance": user.Balance - uint(transfer.Data.Amount),
				})
			var RecipientUser models.User
			db.DB.Where(models.User{TelegramID: int64(transfer.Data.RecipientID)}).First(&RecipientUser)
			msg := tgbotapi.NewMessage(RecipientUser.TelegramID, "–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"+user.Username+"\n\n–ù–∞ —Å—É–º–º—É: "+strconv.Itoa(int(transfer.Data.Amount)))
			ctx.BotAPI.Send(msg)
			db.DB.Model(&models.User{}).
				Where(models.User{TelegramID: int64(transfer.Data.RecipientID)}).
				Updates(map[string]interface{}{
					"balance": RecipientUser.Balance + transfer.Data.Amount,
				})
			HandleProfile(update, ctx)
			delete(state.Data, "transfer")
		}
	}
	state.Data["transfer"] = transfer
}
