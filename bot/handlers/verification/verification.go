package verification

import (
	"strings"
	"tgbotBARAHOLKA/bot/context"
	"tgbotBARAHOLKA/config"
	"tgbotBARAHOLKA/db"
	"tgbotBARAHOLKA/db/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type verificationType struct {
	ActiveStep uint
	Data       verificationData
}

type verificationData struct {
	FIO            FIO
	VisaType       string
	Services       string
	CardIdFileID   string
	DocumentFileID string
}

type FIO struct {
	FirstName  string
	LastName   string
	Patronymic string
}

func HandleBackToStartMenu(ctx *context.Context, userID int64) {
	state := context.GetUserState(userID, ctx)
	context.UpdateUserLevel(userID, ctx, 0)
	var rows [][]tgbotapi.InlineKeyboardButton
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "StartMenu")))
	msg := tgbotapi.NewEditMessageTextAndMarkup(
		userID,
		state.MessageID,
		"‚è≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –û–∂–∏–¥–∞–π—Ç–µ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
		tgbotapi.NewInlineKeyboardMarkup(rows...),
	)
	msg.ParseMode = "HTML"
	ctx.BotAPI.Send(msg)
}

func HandleVerification(update *tgbotapi.Update, ctx *context.Context) {
	var userID int64
	var value string
	var photoID string
	var user models.User
	db.DB.Where("telegram_id = ?", userID).First(&user)
	if update.Message != nil {
		userID = update.Message.Chat.ID
		deleteMsg1 := tgbotapi.DeleteMessageConfig{
			ChatID:    userID,
			MessageID: update.Message.MessageID,
		}
		if update.Message.Photo != nil {
			photoID = update.Message.Photo[len(update.Message.Photo)-1].FileID
		}
		value = update.Message.Text
		ctx.BotAPI.Send(deleteMsg1)

	} else {
		userID = update.CallbackQuery.From.ID
	}

	state := context.GetUserState(userID, ctx)
	context.UpdateUserLevel(userID, ctx, 1)

	var rows [][]tgbotapi.InlineKeyboardButton
	verification, exist := state.Data["verification"].(verificationType)
	if !exist {
		verification.ActiveStep = 0
		state.Data["verification"] = verification
	}

	switch verification.ActiveStep {
	case 0:
		if update.CallbackQuery != nil && strings.Split(update.CallbackQuery.Data, "_")[0] == "Verification" {
			if user.Balance < config.GlobalSettings.VerificationCost {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				ctx.BotAPI.Send(msg)
			}
			verification.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∞–∫ –≤ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (ID-card)\n\nüìã <i>–ü—Ä–∏–º–µ—Ä:</i> ÌôçÍ∏∏Îèô / Hong Gil Dong\n\n‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û, –∫–∞–∫ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –≤–∞—à–µ–π ID-–∫–∞—Ä—Ç–µ.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 1:
		if update.Message != nil {
			if value == "" {
				msg := tgbotapi.NewMessage(userID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∞–∫ –≤ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.")
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			// FIO := strings.Split(value, " ")
			verification.Data.FIO.LastName = value
			// verification.Data.FIO.FirstName = FIO[1]
			// verification.Data.FIO.Patronymic = FIO[2]
			verification.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è\n\nüåç <i>–ü—Ä–∏–º–µ—Ä:</i> –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ö–æ—Ä–µ–∏, F-5 (–í–ù–ñ), F-4, F-6, F-2, F-1...\n\nüîë –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –≤–∏–∑—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 2:
		if update.Message != nil {
			if value == "" {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—ã –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è.",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			verification.Data.VisaType = value
			verification.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"3Ô∏è‚É£ –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ\n\nüíº <i>–ü—Ä–∏–º–µ—Ä:</i> –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–æ, –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\nüìú –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 3:
		if update.Message != nil {
			if value == "" {
				rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
				msg := tgbotapi.NewEditMessageTextAndMarkup(
					userID,
					state.MessageID,
					"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥.",
					tgbotapi.NewInlineKeyboardMarkup(rows...),
				)
				msg.ParseMode = "HTML"
				ctx.BotAPI.Send(msg)
				return
			}
			verification.Data.Services = value
			verification.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ (ID-card)\n\nüì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω –≤–∞—à–µ–π ID-–∫–∞—Ä—Ç—ã.\n\nüîí <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã!</b>",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 4:
		if update.Message.Photo != nil {
			verification.Data.CardIdFileID = photoID
			verification.ActiveStep++
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip")))
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"5Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\nüìö <i>–ü—Ä–∏–º–µ—Ä:</i> –î–∏–ø–ª–æ–º, –ª–∏—Ü–µ–Ω–∑–∏—è, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n\nüåü –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		} else {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–º–µ–Ω–∞", "back")))
			msg := tgbotapi.NewEditMessageTextAndMarkup(
				userID,
				state.MessageID,
				"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏.",
				tgbotapi.NewInlineKeyboardMarkup(rows...),
			)
			msg.ParseMode = "HTML"
			ctx.BotAPI.Send(msg)
		}
	case 5:
		if update.Message != nil && update.Message.Photo != nil {
			verification.Data.DocumentFileID = photoID
		}
		delete(state.Data, "verification")
		HandleBackToStartMenu(ctx, userID)
		if err := db.DB.Model(&models.User{}).
			Where("id = ?", uint(user.ID)).
			Updates(map[string]interface{}{
				"verification": true,
				"balance":      user.Balance - config.GlobalSettings.VerificationCost,
			}).Error; err != nil {
			return
		}
		NewAplication := models.VerificationAplication{
			UserID:         user.ID,
			FirstName:      verification.Data.FIO.FirstName,
			LastName:       verification.Data.FIO.LastName,
			Patronymic:     verification.Data.FIO.Patronymic,
			VisaType:       verification.Data.VisaType,
			CardIdFileID:   verification.Data.CardIdFileID,
			DocumentFileID: verification.Data.DocumentFileID,
			Services:       verification.Data.Services,
		}
		db.DB.Create(&NewAplication)
		return

	}
	state.Data["verification"] = verification
}
